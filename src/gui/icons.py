#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2008 Martin Manns
# Distributed under the terms of the GNU General Public License
# generated by wxGlade 0.6 on Mon Mar 17 23:22:49 2008

# --------------------------------------------------------------------
# pyspread is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pyspread is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pyspread.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

"""
icons
=====

Provides:
---------
  1) ArtProvider: Provides stock and custom icons

"""

import types

import wx

from sysvars import get_program_path

class _ArtProvider(wx.ArtProvider):
    """Provides extra icons in addition to the standard ones
    
    Used only by Icons class
    
    """
    
    def __init__(self, theme, icon_size):
        
        wx.ArtProvider.__init__(self)

        _size_str = "x".join(map(str, icon_size))

        _theme_path = f"{get_program_path()}share/icons/"
        _icon_path = _theme_path + theme + "/" + _size_str + "/"
        _action_path = f"{_icon_path}actions/"
        _toggle_path = f"{_icon_path}toggles/"

        self.extra_icons = {
            "PyspreadLogo": f"{_theme_path}pyspread.png",
            "EditCopyRes": f"{_action_path}edit-copy-results.png",
            "FormatTextBold": f"{_action_path}format-text-bold.png",
            "FormatTextItalic": f"{_action_path}format-text-italic.png",
            "FormatTextUnderline": _action_path + "format-text-underline.png",
            "FormatTextStrikethrough": _action_path
            + "format-text-strikethrough.png",
            "JustifyRight": f"{_action_path}format-justify-right.png",
            "JustifyCenter": f"{_action_path}format-justify-center.png",
            "JustifyLeft": f"{_action_path}format-justify-left.png",
            "AlignTop": f"{_action_path}format-text-aligntop.png",
            "AlignCenter": f"{_action_path}format-text-aligncenter.png",
            "AlignBottom": f"{_action_path}format-text-alignbottom.png",
            "Freeze": f"{_action_path}frozen_small.png",
            "AllBorders": f"{_toggle_path}border_all.xpm",
            "LeftBorders": f"{_toggle_path}border_left.xpm",
            "RightBorders": f"{_toggle_path}border_right.xpm",
            "TopBorders": f"{_toggle_path}border_top.xpm",
            "BottomBorders": f"{_toggle_path}border_bottom.xpm",
            "InsideBorders": f"{_toggle_path}border_inside.xpm",
            "OutsideBorders": f"{_toggle_path}border_outside.xpm",
            "TopBottomBorders": f"{_toggle_path}border_top_n_bottom.xpm",
            "SearchCaseSensitive": f"{_toggle_path}aA.png",
            "SearchRegexp": f"{_toggle_path}regex.png",
            "SearchWholeword": f"{_toggle_path}wholeword.png",
        }
            
    
    def CreateBitmap(self, artid, client, size):
        """Adds custom images to Artprovider"""
        
        if artid in self.extra_icons:
            return wx.Bitmap(self.extra_icons[artid], wx.BITMAP_TYPE_ANY)
            
        else:
            return wx.ArtProvider.GetBitmap(artid, client, size)
        

class Icons(object):
    """Provides icons for pyspread"""
        
    theme = "Tango"
    
    icon_size = (24, 24)
    icon_set = wx.ART_OTHER
    
    icons = { \
        "FileNew": wx.ART_NEW, 
        "FileOpen": wx.ART_FILE_OPEN, 
        "FileSave": wx.ART_FILE_SAVE, 
        "FilePrint": wx.ART_PRINT, 
        "EditCut": wx.ART_CUT, 
        "EditCopy": wx.ART_COPY,
        "EditPaste": wx.ART_PASTE,
        "Undo": wx.ART_UNDO,
        "Redo": wx.ART_REDO,
        "Find": wx.ART_FIND,
        "FindReplace": wx.ART_FIND_AND_REPLACE,
        "SearchDirectionUp": wx.ART_GO_UP,
        "SearchDirectionDown": wx.ART_GO_DOWN,
        }
    
    def __init__(self):
        wx.ArtProvider.Push(_ArtProvider(self.theme, self.icon_size))
                 
    
    def __getitem__(self, icon_name):
        """Returns by bitmap
        
        Parameters
        ----------
        icon_name: String
        \tString identifier of the icon.
        
        """
        
        if icon_name in self.icons:
            icon_name = self.icons[icon_name]

        return wx.ArtProvider.GetBitmap(icon_name, self.icon_set, self.icon_size)
        
icons = Icons()
